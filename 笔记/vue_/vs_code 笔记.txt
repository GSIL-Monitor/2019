vs 笔记
所有命令都在Command Palette中

Ctrl + P 打开文件   键入？查看帮助建议

错误和警告  Ctrl + Shift + M

定位错误  Shift + F8

自定义键盘快捷键  Ctrl + K Ctrl + S.
自定义快捷键，在keybindings.json
 

Ctrl + Alt +向上 延续光标

移动段 Alt +向上

Shift + Ctrl+拖动  框选


Ctrl + Shift + X 扩展

Ctrl + KZ 禅模式  按两次Esc退出

Alt+单击 打开连接


Ctrl + Shift + L 当前选择的所有实例添加其他游标




 ＃
 Ctrl + T.

 :
 Ctrl + G  转到第几行
 
 @
Alt + R  在搜索框中启用正则表达式


 撤消光标位置
 Ctrl + U.



代码格式
当前选择的源代码：Ctrl + K Ctrl + F.

整个文档格式：Shift + Alt + F.


Ctrl + Shift + F12 窥视     F12

重命名符号 F2 



语言服务基于语言语义和源代码分析提供智能代码完成     自定义语言服务



调试

继续/暂停F5
跳过F10
进入F11
Step Out Shift + F11
重新启动Ctrl + Shift + F5
停止Shift + F5


Launch.json属性
    type - 用于此启动配置的调试器类型。每个安装的调试扩展都会引入一种类型，例如，node内置节点调试器，php以及goPHP和Go扩展。
    request - 此启动配置的请求类型。目前支持的是launch和attach。
    name - 友好名称，显示在“调试启动配置”下拉列表中。
    以下是可用于所有启动配置的一些可选属性：

    preLaunchTask- 要在调试会话开始之前启动任务，请将此属性设置为tasks.json中指定的任务的名称（位于工作空间的.vscode文件夹下）。
    postDebugTask- 要在调试会话的最后启动任务，请将此属性设置为tasks.json中指定的任务的名称（位于工作空间的.vscode文件夹下）。
    internalConsoleOptions - 在调试会话期间控制Debug Console面板的可见性
    debugServer- 仅适用于调试扩展作者：连接到指定的端口而不是启动调试适配器
    许多调试器支持以下某些属性：

    program - 启动调试器时要运行的可执行文件或文件
    args - 传递给程序进行调试的参数
    env- 环境变量（该值null可用于“取消定义”变量）
    cwd - 当前工作目录，用于查找依赖项和其他文件
    port - 连接到正在运行的进程时的端口
    stopOnEntry - 程序启动时立即中断
    console-要使用什么样的主机，例如internalConsole，integratedTerminal，externalTerminal。

    高级调试
        条件断点
        内联断点
        功能断点


tasks.json    https://code.visualstudio.com/docs/editor/tasks#vscode
    label：用户界面中使用的任务标签。
    type：任务的类型。对于自定义任务，可以是shell或process。如果shell指定，则该命令将被解释为shell命令（例如：bash，cmd或PowerShell）。如果process指定，则该命令被解释为要执行的进程。
    command：要执行的实际命令。
    windows：任何Windows特定属性。在Windows操作系统上执行命令时，将使用而不是默认属性。
    group：定义任务所属的组。在示例中，它属于该test组。可以通过从命令选项板运行“运行测试任务”来执行属于测试组的任务。
    presentation：定义如何在用户界面中处理任务输出。在此示例中，显示显示输出的集成终端，always并new在每个任务运行时创建终端。
    options：覆盖cwd（当前工作目录），env（环境变量）或shell（默认shell）的默认值。可以按任务设置选项，也可以全局或按平台设置选项。



变量  https://code.visualstudio.com/docs/editor/variables-reference

$ {workspaceFolder} - 在VS Code中打开的文件夹的路径
$ {workspaceFolderBasename} - VS代码中打开的文件夹的名称，没有任何斜杠（/）
$ {file} - 当前打开的文件
$ {relativeFile} - 当前打开的文件相对于workspaceFolder
$ {fileBasename} - 当前打开文件的基本名称
$ {fileBasenameNoExtension} - 当前打开文件的基本名称，没有文件扩展名
$ {fileDirname} - 当前打开文件的目录名
$ {fileExtname} - 当前打开文件的扩展名
$ {cwd} - 任务运行器在启动时的当前工作目录
$ {lineNumber} - 活动文件中当前选定的行号
$ {selectedText} - 活动文件中当前选定的文本








{

    "version": "0.2.0",
    "configurations": [
        {
            "name": "谷歌浏览器", //运行html文件，用谷歌浏览器打开
            "type": "chrome",
            "request": "launch",
            "url": "${file}",
            "sourceMaps": true,
            "webRoot": "${workspaceRoot}"
        },
        {
            "name": "nodeLauch", //单独调试js，即可以直接运行js
            "type": "node",
            "request": "launch",
            "program": "${file}", //这个配置成你要调试的文件、${file}当前打开的文件
            "stopOnEntry": false,
            "args": [],
            "cwd": "${workspaceRoot}",
            "runtimeExecutable": null,
            "runtimeArgs": ["--nolazy"],
            "env": {"NODE_ENV": "development"},
            "console": "internalConsole",
            "preLaunchTask": "",
            "sourceMaps": false,
            "outDir": null
        }
    ]
}


常用插件推荐
    Auto Close Tag：自动闭合Html/XML标签；
    Auto Rename Tag：自动完成另一侧标签的同步修改；
    Beautify：格式化代码，支持自定义格式化代码规则；
    Bracket Pair Colorizer：给括号加上不同的颜色，区分不同的区块；
    Debugger for Chrome：映射vscode上的断点到chrome上，方便调试；
    ESlint：js语法纠错，配置较为复杂；
    GitLens：方便查看git日志；
    HTML CSS Support：智能提示css类型以及id；
    Html Snippet ：智能提示Html标签，以及标签含义；
    JavaScript(es6) code snippet ：es6语法智能提示，以及快速输入；
    jQuery Code Snippet：jQuery 代码智能提示；
    Material Icon Theme 和 vscode-icons：最好的vscode主题；
    open in browser：支持快捷键在浏览器中打开html文件；
    Path Intellisense：自动提示文件路径，支持各种快速引入文件；
    Vetur：Vue多功能集成插件。   