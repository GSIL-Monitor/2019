


概念不清 

感受你的愚蠢吧  

知道自己在哪 要去哪 是多么好的一件事 

我今年27 没有成年  

ES6
underscore 这是什么 

ajax   


浏览器
dom bom






只是其中的一种组合而已






只有点-线



大
是通用  是范围

看书

源码 

js封装  
jq封装

类




css 树
http://javascript.ruanyifeng.com/dom/css.html



 

小  是点

jQuery 的无 new 调用
双循环







阶段一

内容：
	html
		理解创建网页的基本语法规范  常用的标签与属性 网页间的链接与跳转 标签节点 层级节点
	css 
		行内样式  内部样式 外部样式 盒模型 常用布局
	js 
		基础语法和变量 数据类型转换 条件判断  循环语句 函数 数组 
	简单页面
		css抽象与复用 float margin padding border 定位 居中

目标：
	熟悉媒体查询和响应式设计 
	熟悉基础css格式和css盒模型
	理解链接跳转 _blank 多列布局 
	理解如何创建一个简单页面


阶段二 
内容：
	js基础
		js语言的基本构成 变量 数据类型 表达式  流程控制 顺序 判断  循环 短路 函数
	dom+bom
		dom基本操作 节点对象操作 事件操作 常见的bom功能
	网页特效
		在特效中常用的编程接口  动画 事件对象 冒泡 轮播图 导航栏  正则 
	jquery 
		选择器 动画 事件 插件机制  原理分析  写一个简单的作品
	
目标：
	能够基于jquery实现酷炫的效果 和复杂的功能模块
	能创建或添加自定义效果到页面上
	能熟练添加标准的动画效果到页面上
	熟练操作dom模型



阶段三
内容：
	html5+css3
		语义化结构 多媒体 本地存储  css3选择器 css3边框 背景 阴影 过渡 动画 伸缩盒 
	服务端
		理解服务器搭建 xml json 
	ajax 
		基本的编程接口 数据获取  发送  跨域  
	移动web开发
		响应式 bootstrap zepto  预编译css

目标
	能够基于jquery/zepto进行移动端js开发
	基于原生或框架进行响应式效果开发 
	基于jquery bootstrap实现酷炫效果 和 功能模块
	能独立制作电商网站 以及常见js 动态效果



阶段四
	面向对象在js中的体现与实践
		对象的基本概念 面向对象理论  
	开发过程中常用的模式与思想
		开放封闭原则 mvc思想 高内聚低耦合 设计模式 
	js高级特性
		构造函数 原型 原型链 继承 作用域链 闭包  沙箱 
	封装一个自己的框架 
		选择器框架 属性操作封装  dom操作封装  事件框架封装












异步轮询

路由

封装  

js属性类型 

类 

ajax  

CommonJS
requirejs
Promise
Underscore
lodash.js  是一个一致性、模块化、高性能的 JavaScript 实用工具库。


WebGL, Web Workers, Service Workers


展示页面
http://www.cnblogs.com/lijiayi/p/githubpages.html



git  

node

hexo    


页面



















++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 css--    js--  jquery--  ajax--     git--
-------------------------------------------------------------------------------------------------------------------------------------




-------------------------------------------------------------------------------------------------------------------------------------







css--

--------------------------------------------------------------------------------------------------------------------------------

  
 jquery-- 


 深拷贝  



     
是否使用jq封装过组件
事件委托



















-------------------------------------------------------------------------------------------------------------------------------------

 


















js--








js是解释型语言  不需要编译 


new和Object.create的区别

滚动效果的实现，用原生js实现，

怎么判断一个对象为空对象呢


cookie与session的区别
没答全

cookie存放在客户端，session存放在服务端
cookie不安全，session存放在服务器，较安全
session过多，影响服务器性能
单个cookie保存的数据不能超过4K

数组去重

let const 和 var的区别
es6中，箭头函数的this指向    与this的区别

css加载与js加载有什么不同
 
	css是并行加载，js是串行加载

按需加载、动态异步加载






解释下MVC中的三个字母的含义
 
从输入一个url到页面完成渲染，经历了哪些过程
 




es6中，新增了哪些数组方法

	from、of、find、findIndex、fill、entries 、keys 、values、includes

js中，哪些数组方法是改变自身，哪些是得到一个新数组
	没答全

	改变自身：push、pop、shift、unshift、fill、reverse、sort、splice、copyWithin
	返回新数组：from、map、concat、filter



Js事件委托
	
Js中_proto_，说一下原型链



如何使用谷歌浏览器调试被压缩过后的代码
 


主要是讲promise，async/await的具体使用，与区别

 
 


单例模式，观察者模式


MVC的基础是观察者模式，这是实现model和view同步的关键





-------------------------------------------------------------------------------------------------------------------------------------










































ajax--


1234

请求过程

ajax是同步还是异步，怎么实现同步


promise版本的ajax


Ajax 解决浏览器缓存问题
	在ajax发送请求前加上 anyAjaxObj.setRequestHeader("If-Modified-Since","0")。
	
	在ajax发送请求前加上 anyAjaxObj.setRequestHeader("Cache-Control","no-cache")。
	
	在URL后面加上一个随机数： "fresh=" + Math.random()。
	
	在URL后面加上时间搓："nowtime=" + new Date().getTime()。
	
	如果是使用jQuery，直接这样就可以了 $.ajaxSetup({cache:false})。这样页面的所有ajax都会执行这条语句就是不需要保存缓存记录。



ajax 留言板



git--




单页面富应用 spa

mvc 设计模式  高性能 蝴蝶书







js设计模式与开发实战 曾探

	1.面向对象 原型模式和基于原型继承的javascript对象系统
	2.call apply 
	3.闭包 高阶函数
	
	设计模式
		单例模式
		代理模式
		订阅发布
	
	设计原则 
		单一职责原则
		最少知识原则
		开放封闭原则
		接口和面向接口编程
		代码重构
	


javascript设计模式  作者:ross
	接口
	封装
	继承 

	单体模式
	方法的链式调用
	工厂模式
	桥接模式
	组合模式
	代理模式
	观察者模式




mvc    显示 调度 数据

    mvc和类
    	创建类 给类添加属性 和方法  添加私有函数
    
    事件和监听
    
    	监听事件  取消事件 事件对象   委托事件  自定义事件
    
    模型和数据
    	mvc和命名空间
    	构建对象的关系映射 orm
    	原型继承
    	
    	添加ORM 属性
    	持久化记录
    	增加id支持
    	寻址引用
    	装载数据 
    	直接嵌套数据
    	通过ajax载入数据
    	jsonp
    	跨域请求的安全性
    
    
    	向ORM中 添加记录
    	本地存储 localStorage  sessionStorage
    
    	给ORM添加本地存储
    	将新纪录提交给服务器
    
    控制器和状态
    
    	模块模式
    	全局导入 导出
    	添加少量上下文
    	
    	抽象出 库
    	
    	文档加载完成后载入控制器
    	访问视图
    	委托事件
    	状态机
    	路由选择
    	使用URL中的哈希
    	检测哈希变化
    	抓取ajax
    	使用HTML5 history
    
    视图和模板
    	动态渲染视图
    	模板
    	模板 help()
    	模板存储
    	模型中的事件绑定
    
    
  
    


 main.js
 app.vue

 router/index.js    

 page/index.vue

 component/musiclist.vue 