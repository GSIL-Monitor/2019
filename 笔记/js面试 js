转载https://juejin.im/post/5b325c38e51d4558c7136818?utm_source=gold_browser_extension
星  https://juejin.im/post/5b44a485e51d4519945fb6b7?utm_source=gold_browser_extension




类型转换
	[]+[]
	""
	
  []==[] false


	[]+{}
	"[object Object]"
	
	{}+[]
	0
	
	{}+{}
	"[object Object][object Object]"
	
	true+true
	2	

 
'5' + 3  //"53"  字符串拼接
'5' - 3  //2     变成数字

一元正号运算符

+"3"   // 3
+true  // 1
+false // 0
+null  // 0



使用“!”操作符两次，可以把一个值转换为布尔型。
!!'demo';    //true 
!!'';        //false 


var name = 'World!'; 
(function () { 
    if (typeof name === 'undefined') { 
        var name = 'Jack'; 
        console.log('Goodbye ' + name); 
    } else { 
        console.log('Hello ' + name); 
    } 
})();//Goodbye jack





var ary = [0,1,2]; 
ary[10] = 10; 
ary.filter(function(x) { return x === undefined;});
答案是 空[]  中间的几项不是数组的属性 遍历时会跳过这些坑

解释 http://web.jobbole.com/86461/



Array.prototype 本身也是一个 Array
Array.isArray( Array.prototype )//true



var a = {}, b = Object.prototype;
[a.prototype === b, Object.getPrototypeOf(a) === b]

只有 Function 拥有一个 prototype 的属性. 所以 a.prototype 为 undefined.
Object.getPrototypeOf(a) === Object.prototype




function f() {}
var a = f.prototype, b = Object.getPrototypeOf(f);
a === b //false

f.prototype 是实例的原型   f()的构造函数是Function   原型是Function.prototype

a === Object.getPrototypeOf(new f()) // true
b === Function.prototype // true



function foo() { }
var oldName = foo.name;
foo.name = "bar";
[oldName, foo.name]
答案 ['foo', 'foo']
函数名不可变


var a = Function.length,
    b = new Function().length
a === b
解释：Function.length 定义为1  b.length == 0.


var b = new Date(0); Thu Jan 01 1970
var c = new Date();  Thu Dec 06 2018


get和post请求在缓存方面的区别  
  get请求类似于查找的过程，用户获取数据，可以不用每次都与数据库连接，所以可以使用缓存。
  post不同，post做的一般是修改和删除的工作，所以必须与数据库交互，所以不能使用缓存。因此get请求适合于请求缓存。



误区：我们经常说get请求参数的大小存在限制，而post请求的参数大小是无限制的。

   协议没有限制长度   浏览器和 web服务器限制了 URI的长度
 
   ie 最大长度2k    Chrome最大长度8k




闭包 内部函数可以访问父级函数作用域的变量或属性



mouseover和mouseenter的区别

  mouseover：当鼠标移入元素或其子元素都会触发事件，所以有一个重复触发，冒泡的过程。对应的移除事件是mouseout

  mouseenter：当鼠标移除元素本身（不包含元素的子元素）会触发事件，也就是不会冒泡，对应的移除事件是mouseleave




js的各种位置，比如clientHeight,scrollHeight,offsetHeight ,以及scrollTop, offsetTop,clientTop的区别？
  
  clientHeight：表示的是可视区域的高度，不包含border和滚动条
  
  offsetHeight：表示可视区域的高度，包含了border和滚动条
  
  scrollHeight：表示了所有区域的高度，包含了因为滚动被隐藏的部分。
  
  clientTop：表示边框border的厚度，在未指定的情况下一般为0
  
  scrollTop：滚动后被隐藏的高度，获取对象相对于由offsetParent属性指定的父坐标(css定位的元素或body元素)距离顶端的高度。


js拖拽功能的实现
    首先是三个事件，分别是mousedown，mousemove，mouseup
    当鼠标点击按下的时候，需要一个tag标识此时已经按下，可以执行mousemove里面的具体方法。
    
    clientX，clientY标识的是鼠标的坐标，分别标识横坐标和纵坐标，并且我们用offsetX和offsetY来表示元素的元素的初始坐标，移动的举例应该是：
    
    鼠标移动时候的坐标-鼠标按下去时候的坐标。
    
    也就是说定位信息为：
    
    鼠标移动时候的坐标-鼠标按下去时候的坐标+元素初始情况下的offetLeft.
    
    还有一点也是原理性的东西，也就是拖拽的同时是绝对定位，我们改变的是绝对定位条件下的left
    以及top等等值。
    
    补充：也可以通过html5的拖放（Drag 和 drop）来实现
    






类的创建和继承
 

下面来创建一个Animal类：

  // 定义一个动物类
  function Animal (name) {
    // 公有属性
    this.name = name || 'Animal';
    // 实例方法
    this.sleep = function(){
      console.log(this.name + '正在睡觉！');
    }
  }
  // 原型方法
  Animal.prototype.eat = function(food) {
    console.log(this.name + '正在吃：' + food);
  };
  这样就生成了一个Animal类，实力化生成对象后，有方法和属性。




类的继承——原型链继承

 
  function Cat(){ }
  Cat.prototype = new Animal();
  Cat.prototype.name = 'cat';
  //　Test Code
  var cat = new Cat();
  console.log(cat.name);
  console.log(cat.eat('fish'));
  console.log(cat.sleep());
  console.log(cat instanceof Animal); //true 
  console.log(cat instanceof Cat); //true

  介绍：在这里我们可以看到new了一个空对象,这个空对象指向Animal并且Cat.prototype指向了这个空对象，这种就是基于原型链的继承。
  缺点：无法实现多继承

  构造继承     特点：可以实现多继承   缺点：只能继承父类实例的属性和方法，不能继承原型上的属性和方法。
    function Animal(name){      
          this.name = name;      
          this.showName = function(){      
              alert(this.name);      
          }      
      }      
          
      function Cat(name){    
          Animal.call(this, name);    
      }      
          
      var cat = new Cat("Black Cat");     
      cat.showName();  
      
      
      仍然注意我选中的部分，thisArg(你的例子中就是Animal.call(this, name)里的this)，fun(你的例子中就是Animal.call(this, name)里的Animal)。
      
      由此我们对Animal.call(this, name)这句话，可以知道两点：
      
      她会执行Animal方法，并传入name作为参数
      
      Animal方法里写的this会被call(this里的this(实际是Cat实例对象，上面刚讲的)替换掉
      
      那你再想想，Animal方法里写的this.name = name;和this.showName = function(){ alert(this.name); }是什么意思？其实就是cat.name = name;和cat.showName = function(){ alert(cat.name); }
      
      现在再看到cat.showName();居然能弹出来Black Cat，还会吃惊么？
  



基础javascript篇 https://github.com/forthealllight/blog/issues/15
进阶javascript篇 https://github.com/forthealllight/blog/issues/18


Cookie、sessionStorage、localStorage的区别
  共同点：都是保存在浏览器端，并且是同源的
  
  Cookie：cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下,存储的大小很小只有4K左右。 （key：可以在浏览器和服务器端来回传递，存储容量小，只有大约4K左右）
  
  sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持，localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。（key：本身就是一个回话过程，关闭浏览器后消失，session为一个回话，当页面不同即使是同一页面打开两次，也被视为同一次回话）
  
  localStorage：localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。（key：同源窗口都会共享，并且不会失效，不管窗口或者浏览器关闭与否都会始终生效）
  
  补充说明一下cookie的作用：
  
  保存用户登录状态。例如将用户id存储于一个cookie内，这样当用户下次访问该页面时就不需要重新登录了，现在很多论坛和社区都提供这样的功能。 cookie还可以设置过期时间，当超过时间期限后，cookie就会自动消失。因此，系统往往可以提示用户保持登录状态的时间：常见选项有一个月、三个 月、一年等。
  
  跟踪用户行为。例如一个天气预报网站，能够根据用户选择的地区显示当地的天气情况。如果每次都需要选择所在地是烦琐的，当利用了 cookie后就会显得很人性化了，系统能够记住上一次访问的地区，当下次再打开该页面时，它就会自动显示上次用户所在地区的天气情况。因为一切都是在后 台完成，所以这样的页面就像为某个用户所定制的一样，使用起来非常方便
  
  定制页面。如果网站提供了换肤或更换布局的功能，那么可以使用cookie来记录用户的选项，例如：背景色、分辨率等。当用户下次访问时，仍然可以保存上一次访问的界面风格。
  



事件流
  HTML中与javascript交互是通过事件驱动来实现的，例如鼠标点击事件onclick、页面的滚动事件onscroll等等，可以向文档或者文档中的元素添加事件侦听器来预订事件。想要知道这些事件是在什么时候进行调用的，就需要了解一下“事件流”的概念。
  
  什么是事件流：事件流描述的是从页面中接收事件的顺序,DOM2级事件流包括下面几个阶段。
  
  事件捕获阶段
  处于目标阶段
  事件冒泡阶段
  addEventListener：addEventListener 是DOM2 级事件新增的指定事件处理程序的操作，这个方法接收3个参数：要处理的事件名、作为事件处理程序的函数和一个布尔值。最后这个布尔值参数如果是true，表示在捕获阶段调用事件处理程序；如果是false，表示在冒泡阶段调用事件处理程序。
  
  IE只支持事件冒泡。
  



事件委托
  简介：事件委托指的是，不在事件的发生地（直接dom）上设置监听函数，而是在其父元素上设置监听函数，通过事件冒泡，父元素可以监听到子元素上事件的触发，通过判断事件发生元素DOM的类型，来做出不同的响应。
  
  举例：最经典的就是ul和li标签的事件监听，比如我们在添加事件时候，采用事件委托机制，不会在li标签上直接添加，而是在ul父元素上添加。
  
  好处：比较合适动态元素的绑定，新添加的子元素也会有监听函数，也可以有事件触发机制。
  




如何实现一个私有变量，用getName方法可以访问，不能直接访
(1)通过defineProperty来实现


obj={
  name:yuxiaoliang,
  getName:function(){
    return this.name
  }
}
object.defineProperty(obj,"name",{
   //不可枚举不可配置
});



通过函数的创建形式
function product(){
    var name='yuxiaoliang';
    this.getName=function(){
      return name;
    }
}
var obj=new product();




如何实现sleep的效果（es5或者es6）
while循环的方式
function sleep(ms){
   var start=Date.now(),expire=start+ms;
   while(Date.now()<expire);
   console.log('1111');
   return;
}
sleep(10000)


实现一个once函数，传入函数参数只执行一次
  function ones(func){
      var tag=true;
      return function(){
        if(tag==true){
          func.apply(null,arguments);
          tag=false;
        }
        return undefined
      }
  }
  

将原生的ajax封装成promise
var  myNewAjax=function(url){
  return new Promise(function(resolve,reject){
      var xhr = new XMLHttpRequest();
      xhr.open('get',url);
      xhr.send(data);
      xhr.onreadystatechange=function(){
           if(xhr.status==200&&readyState==4){
                var json=JSON.parse(xhr.responseText);
                resolve(json)
           }else if(xhr.readyState==4&&xhr.status!=200){
                reject('error');
           }
      }
  })
}



对象深度克隆的简单实现
  function deepClone(obj){
    var newObj= obj instanceof Array ? []:{};
    for(var item in obj){
      var temple= typeof obj[item] == 'object' ? deepClone(obj[item]):obj[item];
      newObj[item] = temple;
    }
    return newObj;
  }






写一个原型链继承的例子
function Element(ele) {
  this.ele = document.getElementById(ele);
}

Element.prototype.html = function(val) {
  var ele = this.ele;
  if (val) {
    ele.innerHTML = val;
    return this;
  } else {
    return ele.innerHTML;
  }
};

Element.prototype.on = function(type, fn) {
  var ele = this.ele;
  ele.addEventListener(type, fn);
  return this;
}

var element = new Element('main');

element.html('hello').on('click', function() {
  alert('handleClick');
});



写一个能遍历对象和数组的通用forEach函数
function forEach(obj, fn) {
  if (obj instanceof Array) {
    obj.forEach(function (item, index) {
      fn(index, item);
    })
  } else {
    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        fn(key, obj[key]);
      }
    }
  }
}

var arr = [1, 2, 3, 4];
forEach(arr, function (index, item) {
  console.log(index + ',' + item);
});

var obj = {
  x: 10,
  y: 20
};
forEach(obj, function (index, item) {
  console.log(index + ',' + item);
});

 
区别： function Person(){} ， var person = Person() 和 var person = new Person() ？

    考点：构造函数
    function Person(name) {
      this.name = name;
    }
                
    var person = Person('John');
    console.log(person); // undefined
    console.log(person.name); // Uncaught TypeError: Cannot read property 'name' of undefined
                          
    var person = new Person('John');
    console.log(person); // Person { name: "John" }
    console.log(person.name); // "john"






var b = 10;
(function b(){
b = 20;
console.log(b);
})();
结果：返回b函数


var b = 10;
(function (){
b = 20;
console.log(b);
})();//20



如何创建私有变量
  你可以通过在函数中声明变量来创建私有变量。因为在函数中，外部无法直接访问
  为了访问该变量，可以构造一个帮助函数来返回该值
  function func() {
  var priv = "secret code";
  return function() {
    return priv;
  }
  }
  
  var getPriv = func();
  console.log(getPriv()); // => secret code



求出数组中最大值？

如果你是一个老实人，应该是如下答案：

Array.prototype.max = function() {
  var max = this[0];
  var len = this.length;
  for (var i = 1; i < len; i++) {
    if (this[i] > max) {
      max = this[i];
    }
  }
  return max;
}


Math.max.apply( null, array );

Math.max(...[14, 3, 77])
  




js怎么控制一次加载一张图片，加载完后再加载下一张
(1)方法1
  <script type="text/javascript">
    var obj=new Image();
    obj.src="http://www.phpernote.com/uploadfiles/editor/201107240502201179.jpg";
      obj.onload=function(){
        alert('图片的宽度为：'+obj.width+'；图片的高度为：'+obj.height);
      document.getElementById("mypic").innnerHTML="<img src='"+this.src+"' />";
    }
  </script>
  <div id="mypic">onloading……</div>
(2)方法2
  <script type="text/javascript">
  var obj=new Image();
  obj.src="http://www.phpernote.com/uploadfiles/editor/201107240502201179.jpg";
    obj.onreadystatechange=function(){
      if(this.readyState=="complete"){
        alert('图片的宽度为：'+obj.width+'；图片的高度为：'+obj.height);
      document.getElementById("mypic").innnerHTML="<img src='"+this.src+"' />";
    }
  }
  </script>
  <div id="mypic">onloading……</div>   