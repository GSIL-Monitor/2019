mongoose 是个 odm。odm 的概念对应 sql 中的 orm。也就是 ruby on rails 中的 activerecord 那一层。orm 全称是 Object-Relational Mapping，对象关系映射；而 odm 是 Object-Document Mapping，对象文档映射。


connect() 
	连接到本地
	连接多个
	断开连接
schema()
	添加其他字段
	时间戳
	_id

model()
	将集合名称设置为模型名称的小写版

自定义方法
	methods
	statics
	query
	实例方法和静态方法的区别

文档新增  
	流程:
		引入mongoose
		connect连接数据库
		定义数据结构
		生成模型
		创建实例
	save() 
	create() 
	insertMany() 

文档查询
	find()
	findById()
	findOne()
	常用的查询条件
		$gt  大于
		$gte 大于等于
		...
查询后的处理
钩子


文档更新
 	update() 

  
文档删除
	remove()
	findOneAndRemove()
	findByIdAndRemove()



!
mongoose有三个重要的概念 Schema 模式  Model 模型 entity实体  
概述
	他们的关系是 schema生成model  model创建document  
	Model和Document都可对数据库操作造成影响， 主要用model来操作数据

		schema 用于定义数据库的结构  不具备操作数据库的能力
		model  是由schema编译而成构造器 具有抽象属性和行为 可以对数据库进行增删改查 model的每一个实例 都是一个document 
		document 是由model创建的实体 他的操作会影响数据库

连接数据库
用connect() 连接mongodb数据库

connect() 
	参数:
		1. url地址
		2. options选项  是一个JavaScript对象
			var options = {
			  db: { native_parser: true },   //数据库设置
			  server: { poolSize: 5 },       //服务器设置     
			  //副本集设置
			  replset: { rs_name: 'myReplicaSetName我的复制集名称' },  
			  user: 'myUserName',            //用户名
			  pass: 'myPassword'             //密码
			}
			mongoose.connect(uri, options);
	
	
	连接到本地localhost的db1服务器
		mongoose.connect('mongodb://localhost/db1');
	
	连接多个数据库  多个url以 , 隔开  同事设置 mongos为true
		mongoose.connect('urla , urlb',{ mongos:true })
	
	connect()函数还接受一个回调参数
		var mongoose = require('mongoose');
		mongoose.connect("mongodb://localhost/test", function(err) {
		    if(err){
		        console.log('连接失败');
		    }else{
		        console.log('连接成功');
		    }
		});

	密码登录 用户名"u1"，密码"123456"登录'db1'数据库

		var mongoose = require('mongoose');
		mongoose.connect("mongodb://u1:123456@localhost/db1", function(err) {
		    if(err){
		        console.log('连接失败');
		    }else{
		        console.log('连接成功');
		    }
		});

	断开连接 disconnect()
		var mongoose = require('mongoose')
		mongoose.connect('mongodb://u1:123456@localhost/test',function(err) {
		    if(err){
		        console.log('连接失败');
		    }else{
		        console.log('连接成功');
		    }
		});
		setTimeout(function(){
		    mongoose.disconnect(function(){
		        console.log("断开连接");
		    })
		}, 2000);
		

schema()
	Schema主要用于定义MongoDB中集合Collection里文档document的结构 
	指定schema非常简单 指定字段名和类型即可

		String      字符串
		Number      数字    
		Date        日期
		Buffer      二进制
		Boolean     布尔值
		Mixed       混合类型
		ObjectId    对象ID    
		Array       数组

	通过mongoose.Schema来调用Schema  使用new方法来创建Schema对象
	
		var mongoose = require('mongoose');
		var Schema = mongoose.Schema;
		var myschema = new Schema({
			title:String,
			comments:[{ body: String, date: Date }],
			date: { type: Date, default: Date.now },
			meta: {votes: Number, favs:  Number }
		})
	
	注意: 创建Schema对象时  声明字段类型有两种方法 
	一种是首字母大写 一种是引号包含的小写
	
		var mySchema = new Schema({title:String, author:String});
		//或者 
		var mySchema = new Schema({title:'string', author:'string'});


	在Schema定义后添加其他字段，可以使用add()方法
	
		var MySchema = new Schema;
		MySchema.add({ name: 'string', color: 'string', price: 'number' });


	【timestamps】 时间戳
		在schema中设置timestamps为true，
		schema映射的文档document会自动添加createdAt和updatedAt这两个字段，
		代表创建时间和更新时间
		
		var UserSchema = new Schema(
		 
		  { timestamps: true }
		);
	
	【_id】
  		每一个文档document都会被mongoose添加一个不重复的id，
		id的数据类型不是字符串，而是ObjectID类型。
		
		查询_id
			findById  √
			find      x


model
	文档document的创建和检索都需要通过模型Model来处理

	使用model()方法，将Schema编译为Model。model()方法的第一个参数是模型名称

  	 注意：一定要将model()方法的第一个参数和其返回值设置为相同的值，
	 否则会出现不可预知的结果

	Mongoose会将集合名称设置为模型名称的小写版。
	如果名称的最后一个字符是字母，则会变成复数；
	如果名称的最后一个字符是数字，则不变；
	如果模型名称为"MyModel"，则集合名称为"mymodels"；
	如果模型名称为"Model1"，则集合名称为"model1"



	实例化文档document
		var MyModel = mongoose.model('MyModel', schema);
	    var doc1 = new MyModel({ size: 'small' });
	
	
	文档保存 save(function (err, doc) {})

		回调函数是可选项，第一个参数为err，第二个参数为保存的文档对象
		var mongoose = require('mongoose');
		mongoose.connect("mongodb://u1:123456@localhost/db1", function(err) {
		    if(!err){
		        var schema = new mongoose.Schema({ num:Number, name: String, size: String });
		        var MyModel = mongoose.model('MyModel', schema);
		        var doc1 = new MyModel({ size: 'small' });
		        
		        doc1.save(function (err,doc) {
		        //{ __v: 0, size: 'small', _id: 5970daba61162662b45a24a1 }
		          console.log(doc);
		        })
		    }
		});
	
	
自定义方法  

	methods 实例方法
		var mongoose = require('mongoose');
		mongoose.connect("mongodb://localhost/db1", function(err) {
		    if(!err){
		        var schema = new mongoose.Schema({ num:Number, name: String, size: String });        
		        schema.methods.findSimilarSizes = function(cb){
		            return this.model('MyModel').find({size:this.size},cb);
		        }
		        var MyModel = mongoose.model('MyModel', schema);
		        var doc1 = new MyModel({ name:'doc1', size: 'small' });
		        var doc2 = new MyModel({ name:'doc2', size: 'small' });
		        var doc3 = new MyModel({ name:'doc3', size: 'big' });
		        doc1.save();
		        doc2.save();
		        doc3.save();
		        setTimeout(function(){
		            doc1.findSimilarSizes(function(err,docs){
		                docs.forEach(function(item,index,arr){
		                    //doc1
		                    //doc2
		                     console.log(item.name)        
		                })
		            })  
		        },0)  
		    }
		});
		
	
	statics 添加静态方法
	
		实例方法和静态方法的区别在于，
			静态方法是通过Schema对象的statics属性给model添加方法，
			实例方法是通过Schema对象的methods是给document添加方法
	
	
		var mongoose = require('mongoose');
		mongoose.connect("mongodb://localhost/db1", function(err) {
		    if(!err){
		        var schema = new mongoose.Schema({ num:Number, name: String, size: String });        
		        schema.statics.findByName = function(name,cb){
		            return this.find({name: new RegExp(name,'i')},cb);
		        }
		        var MyModel = mongoose.model('MyModel', schema);
		        var doc1 = new MyModel({ name:'doc1', size: 'small' });
		        var doc2 = new MyModel({ name:'doc2', size: 'small' });
		        var doc3 = new MyModel({ name:'doc3', size: 'big' });
		        doc1.save();
		        doc2.save();
		        doc3.save();
		        setTimeout(function(){
		            MyModel.findByName('doc1',function(err,docs){
		                //[ { _id: 5971e68f4f4216605880dca2,name: 'doc1',size: 'small',__v: 0 } ]
		                console.log(docs);
		            })  
		        },0)  
		    }
		});
	
	query 查询方法   给model添加查询方法
	
		var mongoose = require('mongoose');
		mongoose.connect("mongodb://localhost/db1", function(err) {
		    if(!err){
		        var schema = new mongoose.Schema({ age:Number, name: String});        
		        schema.query.byName = function(name){
		            return this.find({name: new RegExp(name)});
		        }
		        var temp = mongoose.model('temp', schema);   
		        temp.find().byName('huo').exec(function(err,docs){
		            //[ { _id: 5971f93be6f98ec60e3dc86c, name: 'huochai', age: 27 },
		            // { _id: 5971f93be6f98ec60e3dc86e, name: 'huo', age: 30 } ]
		            console.log(docs);
		        })  
		    }           
		});


文档新增  


	save() 使用save()方法，需要先实例化为文档，再使用save()方法保存文档
		var mongoose = require('mongoose');
		mongoose.connect("mongodb://localhost/db1", function(err) {
		    if(!err){
		        var schema = new mongoose.Schema({ age:Number, name: String});        
		        var temp = mongoose.model('temp', schema);
		        //使用链式写法    
		        new temp({age:10,name:'save'}).save(function(err,doc){
		            //[ { _id: 59720bc0d2b1125cbcd60b3f, age: 10, name: 'save', __v: 0 } ]
		            console.log(doc);        
		        });         
		    }           
		});
		
	create() 
		create()方法， 可以直接在模型Model上操作，并且可以同时新增多个文档
		var mongoose = require('mongoose');
		mongoose.connect("mongodb://localhost/db1", function(err) {
		    if(!err){
		        var schema = new mongoose.Schema({ age:Number, name: String});        
		        var temp = mongoose.model('temp', schema);   
		        temp.create({name:"小明"},{name:"小红"},function(err,doc1,doc2){
		            //{ __v: 0, name: 'xiaowang', _id: 59720d83ad8a953f5cd04664 }
		            console.log(doc1); 
		            //{ __v: 0, name: 'xiaoli', _id: 59720d83ad8a953f5cd04665 }
		            console.log(doc2); 
		        });       
		    }           
		});
	
	insertMany() 	
		
		var mongoose = require('mongoose');
		mongoose.connect("mongodb://localhost/db1", function(err) {
		    if(!err){
		        var schema = new mongoose.Schema({ age:Number, name: String});        
		        var temp = mongoose.model('temp', schema);   
		        temp.insertMany([{name:"a"},{name:"b"}],function(err,docs){
		            //[ { __v: 0, name: 'a', _id: 59720ea1bbf5792af824b30c },
		            //{ __v: 0, name: 'b', _id: 59720ea1bbf5792af824b30d } ]
		            console.log(docs); 
		        });       
		    }           
		});
		


文档查询
	find()
		var mongoose = require('mongoose');
		mongoose.connect("mongodb://localhost/db1", function(err) {
		    if(!err){
		        var schema = new mongoose.Schema({ age:Number, name: String});        
		        var temp = mongoose.model('temp', schema);
		        //找出所有
		            temp.find(function(err,docs){console.log(docs); }) 
		        //找出年龄大于18的数据
		            temp.find({age:{$gte:18}},function(err,docs){console.log(docs); })
		        //找出年龄大于18且名字里存在'huo'的数据
		            temp.find({name:/huo/,age:{$gte:18}},function(err,docs){console.log(docs); })
		        //找出名字里存在'a'的数据，且只输出'name'字段
		            temp.find({name:/a/},'name',function(err,docs){console.log(docs); })
		        //不输出_id
		            temp.find({name:/a/},{name:1,_id:0},function(err,docs){console.log(docs); })
		
		    }
		
		});

	findById()
		显示第0个元素的所有字段
			temp.findById(aIDArr[0],{name:1,_id:0},function(err,doc){console.log(doc); })
			//{  name: 'huochai'}
					两种写法等价
			temp.findById(aIDArr[0],{name:1,_id:0}).exec(function(err,doc){console.log(doc); })
			//{  name: 'huochai'}



	findOne()

		找出age>20的文档中的第一个文档，且只输出name字段
		
			temp.findOne({age:{$gt : 20}},{name:1,_id:0},function(err,doc){console.log(doc); })
			//{ name: 'huochai' }
			
			temp.findOne({age:{$gt : 20}},{name:1,_id:0}).exec(function(err,doc){console.log(doc); })
			//{ name: 'huochai' }


	常用的查询条件
		$or  或关系
		$nor    　 或关系取反
		$gt  大于
		$gte    　 大于等于
		$lt  小于
		$lte    　 小于等于
		$ne  不等于
		$in  在多个值范围内
		$nin    　 不在多个值范围内
		$all    　 匹配数组中多个值
		$regex   正则，用于模糊查询
		$size   　匹配数组大小
		$maxDistance　范围查询，距离（基于LBS）
		$mod        取模运算
		$near   　 邻域查询，查询附近的位置（基于LBS）
		$exists  字段是否存在
		$elemMatch　匹配内数组内的元素
		$within 　范围查询（基于LBS）
		$box         范围查询，矩形范围（基于LBS）
		$center 　范围醒询，圆形范围（基于LBS）
		$centerSphere　范围查询，球形范围（基于LBS）
		$slice    查询字段集合中的元素（比如从第几个之后，第N到第M个元素


钩子
	init
	validate
	save
	remove
	count
	find
	findOne
	findOneAndRemove
	findOneAndUpdate
	insertMany
	update


查询后处理
  
	sort     排序 temp.find().sort("x -age").exec(function(err,docs){console.log(docs); });
	skip     跳过 temp.find().skip(1) 
	limit    限制 temp.find().limit(2) 
	exect    执行
	
	count    计数
		temp.find().count(function(err,count){
		    console.log(count);//4
		}); 
	
	distinct 去重
		返回集合temps中的x的值
		temp.find().distinct('x',function(err,distinct){
		    console.log(distinct);//[ 1, 2 ]
		}); 

	select   显示字段
		显示name、age字段，不显示_id字段
		temp.find().select("name age -_id")




 文档更新 update() 

    第一个参数conditions为查询条件，第二个参数doc为需要修改的数据，第三个参数options为控制选项，第四个参数是回调函数
  		Model.update(conditions, doc, [options], [callback])
    
    options有如下选项
  
      safe (boolean)： 默认为true。安全模式。
      upsert (boolean)： 默认为false。如果不存在则创建新记录。
      multi (boolean)： 默认为false。是否更新多个查询记录。
      runValidators： 如果值为true，执行Validation验证。
      setDefaultsOnInsert： 如果upsert选项为true，在新建时插入文档定义的默认值。
      strict (boolean)： 以strict模式进行更新。
      overwrite (boolean)： 默认为false。禁用update-only模式，允许覆盖记录。



文档删除

	remove()
		一种是文档的remove()方法，一种是Model的remove()方法
		下面介绍Model的remove()方法，该方法的第一个参数conditions为查询条件，第二个参数回调函数的形式如下function(err){}
		删除数据库中名称包括'30'的数据
		temp.remove({name:/30/},function(err){})
	
	findOneAndRemove()
		只删除符合条件的第一条数据，则可以使用model的findOneAndRemove()方法
		Model.findOneAndRemove(conditions, [options], [callback])
	
	
	findByIdAndRemove()
		删除第0个元素
		temp.findByIdAndRemove(aIDArr[0],function(err,doc){console.log(doc); })
	












































如果使用“connect()”或“createConnection()”，则设置“useMongoClient”选项。
var promise = mongoose.connect('mongodb://localhost/myapp', {useMongoClient: true,});

	// 首先引入 mongoose 这个模块
var mongoose = require('mongoose');
	// 然后连接对应的数据库：mongodb://localhost/test
	// 其中，前面那个 mongodb 是 protocol scheme 的名称；localhost 是 mongod 所在的地址；
	// 端口号省略则默认连接 27017；test 是数据库的名称
	// mongodb 中不需要建立数据库，当你需要连接的数据库不存在时，会自动创建一个出来。
	// 关于 mongodb 的安全性，mongodb 我印象中安全机制很残废，用户名密码那套都做得不好，更
	// 别提细致的用户权限控制了。不过不用担心，mongodb 的默认配置只接受来自本机的请求，内网都连不上。
	// 当需要在内网中为其他机器提供 mongodb 服务时，或许可以去看看 iptables 相关的东西。
mongoose.connect('mongodb://localhost/test');

	// 上面说了，我推荐在同一个 collection 中使用固定的数据形式。
	// 在这里，我们创建了一个名为 Cat 的 model，它在数据库中的名字根据传给 mongoose.model 的第一个参数决定，mongoose会将名词变为复数，在这里，collection 的名字会是 `cats`。
	// 这个 model 的定义是，有一个 String 类型的 name，String 数组类型的 friends，Number 类型的 age。
	// mongodb 中大多数的数据类型都可以用 js 的原生类型来表示。至于说 String 的长度是多少，Number 的精度是多少。String 的最大限度是 	16MB，Number 的整型是 64-bit，浮点数的话，js 中 `0.1 + 0.2` 的结果都是乱来的。。就不指望什么了。。
	// 这里可以看到各种示例：http://mongoosejs.com/docs/schematypes.html
var Cat = mongoose.model('Cat', {
  name: String,
  friends: [String],
  age: Number,
});

	// new 一个新对象，名叫 kitty
	// 接着为 kitty 的属性们赋值
var kitty = new Cat({ name: 'Zildjian', friends: ['tom', 'jerry']});
kitty.age = 3;

	// 调用 .save 方法后，mongoose 会去你的 mongodb 中的 test 数据库里，存入一条记录。
kitty.save(function (err) {
  if (err) // ...
  console.log('meow');
});




启动

 mongo
MongoDB shell version: 2.6.4
connecting to: test
> show dbs
> use test
> show collections
> db.cats.find()





















var mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/test')

//加上成功提醒和失败警告
var db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function() {
  // we're connected!
});

//创建一个表结构
var kittySchema = mongoose.Schema({
  name: String //name的值为string类型
});
//用kittySchema 创建一个模型类
var Kitten = mongoose.model('Kitten', kittySchema);



//实例”一只猫
var felyne = new Kitten({ name: 'Felyne' });

var fluffy = new Kitten({ name: 'fluffy' });
fluffy.save(function (err, fluffy) {
    if (err) return console.error(err);
    fluffy.speak();
  });
//添加方法
kittySchema.methods.speak = function () {
  var greeting = this.name? "Meow name is " + this.name: "I don't have a name";
  console.log(greeting);
}

//查找数据
Kitten.find(function (err, kittens) {
  if (err) return console.error(err);
  console.log(kittens);
})





























var mongoose = require('mongoose');
//Mongoose中的所有内容都以Schema开头

// 定义一个模式
var animalSchema = new Schema({ name: String, type: String });

// 为animalSchema的“methods”对象分配一个函数
animalSchema.methods.findSimilarTypes = function(cb) {
  return this.model('Animal').find({ type: this.type }, cb);
};


//现在我们所有的animal实例都有一个findSimilarTypes可用的方法。

var Animal = mongoose.model('Animal', animalSchema);
var dog = new Animal({ type: 'dog' });

dog.findSimilarTypes(function(err, dogs) {
  console.log(dogs); // woof
});