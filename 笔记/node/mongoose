mongoose 是个 odm。odm 的概念对应 sql 中的 orm。也就是 ruby on rails 中的 activerecord 那一层。orm 全称是 Object-Relational Mapping，对象关系映射；而 odm 是 Object-Document Mapping，对象文档映射。


如果使用“connect()”或“createConnection()”，则设置“useMongoClient”选项。
var promise = mongoose.connect('mongodb://localhost/myapp', {useMongoClient: true,});



	// 首先引入 mongoose 这个模块
var mongoose = require('mongoose');
	// 然后连接对应的数据库：mongodb://localhost/test
	// 其中，前面那个 mongodb 是 protocol scheme 的名称；localhost 是 mongod 所在的地址；
	// 端口号省略则默认连接 27017；test 是数据库的名称
	// mongodb 中不需要建立数据库，当你需要连接的数据库不存在时，会自动创建一个出来。
	// 关于 mongodb 的安全性，mongodb 我印象中安全机制很残废，用户名密码那套都做得不好，更
	// 别提细致的用户权限控制了。不过不用担心，mongodb 的默认配置只接受来自本机的请求，内网都连不上。
	// 当需要在内网中为其他机器提供 mongodb 服务时，或许可以去看看 iptables 相关的东西。
mongoose.connect('mongodb://localhost/test');

	// 上面说了，我推荐在同一个 collection 中使用固定的数据形式。
	// 在这里，我们创建了一个名为 Cat 的 model，它在数据库中的名字根据传给 mongoose.model 的第一个参数决定，mongoose会将名词变为复数，在这里，collection 的名字会是 `cats`。
	// 这个 model 的定义是，有一个 String 类型的 name，String 数组类型的 friends，Number 类型的 age。
	// mongodb 中大多数的数据类型都可以用 js 的原生类型来表示。至于说 String 的长度是多少，Number 的精度是多少。String 的最大限度是 	16MB，Number 的整型是 64-bit，浮点数的话，js 中 `0.1 + 0.2` 的结果都是乱来的。。就不指望什么了。。
	// 这里可以看到各种示例：http://mongoosejs.com/docs/schematypes.html
var Cat = mongoose.model('Cat', {
  name: String,
  friends: [String],
  age: Number,
});

	// new 一个新对象，名叫 kitty
	// 接着为 kitty 的属性们赋值
var kitty = new Cat({ name: 'Zildjian', friends: ['tom', 'jerry']});
kitty.age = 3;

	// 调用 .save 方法后，mongoose 会去你的 mongodb 中的 test 数据库里，存入一条记录。
kitty.save(function (err) {
  if (err) // ...
  console.log('meow');
});




启动

 mongo
MongoDB shell version: 2.6.4
connecting to: test
> show dbs
> use test
> show collections
> db.cats.find()





















var mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/test')

//加上成功提醒和失败警告
var db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function() {
  // we're connected!
});

//创建一个表结构
var kittySchema = mongoose.Schema({
  name: String //name的值为string类型
});
//用kittySchema 创建一个模型类
var Kitten = mongoose.model('Kitten', kittySchema);



//实例”一只猫
var felyne = new Kitten({ name: 'Felyne' });

var fluffy = new Kitten({ name: 'fluffy' });
fluffy.save(function (err, fluffy) {
    if (err) return console.error(err);
    fluffy.speak();
  });
//添加方法
kittySchema.methods.speak = function () {
  var greeting = this.name? "Meow name is " + this.name: "I don't have a name";
  console.log(greeting);
}

//查找数据
Kitten.find(function (err, kittens) {
  if (err) return console.error(err);
  console.log(kittens);
})





























var mongoose = require('mongoose');
//Mongoose中的所有内容都以Schema开头

// 定义一个模式
var animalSchema = new Schema({ name: String, type: String });

// 为animalSchema的“methods”对象分配一个函数
animalSchema.methods.findSimilarTypes = function(cb) {
  return this.model('Animal').find({ type: this.type }, cb);
};


//现在我们所有的animal实例都有一个findSimilarTypes可用的方法。

var Animal = mongoose.model('Animal', animalSchema);
var dog = new Animal({ type: 'dog' });

dog.findSimilarTypes(function(err, dogs) {
  console.log(dogs); // woof
});