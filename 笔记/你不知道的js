你不知道的js 上

第一部分  作用域和闭包
	1.作用域
	2.词法作用域
	3函数作用域 块作用域 
		匿名和具名
		立即执行函数
	
	块
		with
		try 
		let
		const
	4.提升
	5.闭包
		模块

第二部分 this 对象原型

	2.this全面解析
		调用位置
		绑定规则
			默认绑定
			隐式绑定
			显示绑定
			new绑定
		优先级
		绑定例外
			被忽略的this
			间接引用
			软绑定
		this词法
	3.对象
		语法
		类型
		内容
		遍历
	4.混合类型 “类”
		类理论
		类机制
		类继承
		混入
	5.原型
		[[prototype]]
		类
		原型继承
		对象关联
	6.行为委托
		面向委托的设计
			类理论
			委托理论
			比较思维模型
		类与对象 
			控件类
			委托控件对象

		更简洁的设计 更好的语法
		内省



你不知道的js  中

	第一部分  类型和语法
		1.类型
		2.值
			数组
			字符串
			数字
		3.原生函数
			内部属性[[class]]
			封装
			拆封
			原生函数作为构造函数
				array
				object
				date error
				symbol
				原生原型
		4.强制类型转换
			值类型转换
			抽象值操作
				tostring
				tonumber
				toboolean
			显式转换
				字符串和数字的显示转换
				显示解析数字
				显示转换为布尔值
			隐式转换
				简化
				字符串 和 数字 的隐式转换
				布尔值 到 数字 的隐式转换
				隐式转换为布尔值
				|| &&
				符号转换

		5.语法
			语句和表达式
				语句的结果值
				表达式的副作用
				上下文规则
			运算符优先级
				短路
				更强的绑定
				关联
				释疑
			自动分号
			函数参数
			try
			switch

	第二部分  异步和性能
		
		1.异步
			分块的程序
			事件循环
			并发线程
			并发
				非交互
				交互
				协作
			任务
			语句顺序
		2.回调
			continuation
			顺序大脑
				执行与计划
				嵌套回调和链式回调
			信任问题
			省点回调
		3.promise
			什么是promise
				未来值
				完成事件
			具有then方法的鸭子类型
			promise信任问题
			链式流
			promise模式
				promise.all()  门 们 多个任务都完成后 门才能打开 让流程控制继续
				promise.race()  第一个冲过终点线的promise
				all() 和 race() 的变体
				并发迭代
			promise api
				new promise()构造器
				promise.resolve() 已完成
				promise.reject()  拒绝
				then(..) 和 catch(..)
			promise局限性
				顺序错误处理
				单一值
				单决议
				惯性
				无法取消的promise

			生成器
				打破完整运行
					输入输出
					多个迭代器
				生成器产生值
					生产者与迭代器
					iterable
					生成器迭代器
				异步迭代生成器
				生成器+promise  生成器(看似同步的异步代码)+promise(可信任可组合)      run()

				生成器委托
					消息委托
					异步委托
					递归委托
				生成器并发
				形实转换程序
			    之前的生成器
			    	手工变换
			    	自动转换
			程序性能
				web worker
			性能测试
			




变量住在哪里  怎么找到他         